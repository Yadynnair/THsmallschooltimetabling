import streamlit as st
import numpy as np
import pandas as pd
import altair as alt
import pulp as pu
import xlsxwriter

st.set_page_config(
    page_title="‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å",
    page_icon="üìö",
)

with st.sidebar:
    st.header('‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÇ‡∏î‡∏¢')
    st.markdown('''
        ‡∏î‡∏£.‡∏®‡∏£‡∏ì‡∏¢‡πå‡πÄ‡∏®‡∏£‡∏©‡∏ê‡πå ‡πÇ‡∏™‡∏Å‡∏±‡∏ô‡∏ò‡∏¥‡∏Å‡∏≤

        ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ô‡∏≤‡∏ô‡∏≤‡∏ä‡∏≤‡∏ï‡∏¥‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏• ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà :elephant:
        
        ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• s.sokantika@gmail.com
    ''')

    with st.expander(''):
        st.header('‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏∑‡πà‡∏≠‡∏¢')
        st.markdown(''' 
            ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å 
            ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÄ‡∏•‡∏¢‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏†‡∏£‡∏£‡∏¢‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏≥‡πÑ‡∏°‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏•‡∏¢ ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏•‡∏¢‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö
            
            ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö
        ''')

st.title('‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å')
st.markdown('''
    ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏ó‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏ö‡∏≤‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π‡πÉ‡∏ô‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
    ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏à‡∏∂‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏ã‡∏∑‡πâ‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô 
    ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
''')

st.header("‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

st.write("‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß **‡πÇ‡∏õ‡∏£‡∏î‡∏Ñ‡∏•‡∏¥‡πä‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á**‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

with open('‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡πà‡∏≤‡∏á‡πÑ‡∏Å‡∏•_2_2565.xlsx', 'rb') as my_file:
    st.download_button(
        label = 'üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö üì•', 
        data = my_file, 
        file_name = '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡πà‡∏≤‡∏á‡πÑ‡∏Å‡∏•_2_2565.xlsx', 
        mime = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')      

st.write("‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß") 
st.write("  1. ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô **‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô_‡πÄ‡∏ó‡∏≠‡∏°_‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤** ‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡πà‡∏≤‡∏á‡πÑ‡∏Å‡∏•_2_2565")
st.write("  2. ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏µ‡∏ó‡πÄ‡∏õ‡πá‡∏ô **‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•** ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡πà‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡∏£‡∏±‡∏Å‡∏™‡∏≠‡∏ô")
st.write("  3. ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏é‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô‡πÉ‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡πÅ‡∏•‡∏∞‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡πÜ ‡πÉ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó‡πÅ‡∏£‡∏Å ‡∏Ñ‡∏£‡∏π‡∏™‡∏°‡∏´‡∏°‡∏≤‡∏¢ ‡∏™‡∏≠‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏õ.4 ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 4 ‡∏Ñ‡∏≤‡∏ö ‡πÉ‡∏ô 1 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå")
st.write("  4. ‡∏ñ‡πâ‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏•‡∏∞‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≤‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏•‡∏∞‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")

uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö")
# upload_status = False
TA = {}

if uploaded_file is not None:
    # upload_status = True
    df = pd.read_excel(uploaded_file,sheet_name=None, engine='openpyxl')
    
    school_name = uploaded_file.name.split('_')[0]
    semester = uploaded_file.name.split('_')[1]
    year = uploaded_file.name.split('_')[2]
    
# Create database

    Teacher = [*df] #get teacher list
    
    Grades = []
    Remove_grades = ['‡∏ß‡∏¥‡∏ä‡∏≤/‡∏ä‡∏±‡πâ‡∏ô','‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•']
    for key in df[Teacher[0]].columns:
        if key not in Remove_grades:
            Grades.append(key)
    
    Allgrades = [g for g in df[Teacher[0]].columns if g != '‡∏ß‡∏¥‡∏ä‡∏≤/‡∏ä‡∏±‡πâ‡∏ô']

    Subjects = []
    Remove_subjects = ['‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô']
    for key in df[Teacher[0]]['‡∏ß‡∏¥‡∏ä‡∏≤/‡∏ä‡∏±‡πâ‡∏ô']:
            if key not in Remove_subjects:
                Subjects.append(key)

    for t in Teacher: #Create Teacher assignment
        Dummy = {}
        for g in Grades:
            Dummy2 = []
            for s in range(len(Subjects)):
                Dummy2.append(round(df[t][g][s]) if pd.notna(df[t][g][s]) else 0)
            Dummy[g] = Dummy2
        
        Dummy['‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô'] = ''
        for g in Grades+['‡∏≠‡∏ô‡∏∏‡∏ö‡∏≤‡∏•']:
            if df[t][g][df[t][df[t]['‡∏ß‡∏¥‡∏ä‡∏≤/‡∏ä‡∏±‡πâ‡∏ô'] == '‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô'].index[0]] == 1:
                Dummy['‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô'] = g

        TA[t] = Dummy

    # Actual Classes
    Classes = []
    for t in Teacher:
        for j in range(len(Subjects)):
            for i in Grades:
                if TA[t][i][j] !=0:
                    for k in range(TA[t][i][j]):
                        Classes.append((t,i,Subjects[j],k))

    # teaching workload 
    teaching_workload = {t:[] for t in Teacher}
    for t in Teacher:
        for c in Classes:
            if c[0] == t:
                teaching_workload[t].append(c)

    # student plan
    student_plan = {g:[] for g in Grades}
    for g in Grades:
        for c in Classes:
            if c[1] == g:
                student_plan[g].append(c)

    # subject plan
    subject_plan = {s:[] for s in Subjects}
    for s in Subjects:
        for c in Classes:
            if c[2] == s:
                subject_plan[s].append(c)

# Upload data not too large

    Teacher_limit = 20
    Grades_limit = 15
    Subjects_limit = 15
    error_counter = False

    if len(Teacher) > Teacher_limit:
        st.error("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {} ‡∏Ñ‡∏ô".format(Teacher_limit))
        error_counter = True

    if len(Grades) > Grades_limit:
        st.error("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {} ‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô".format(Grades_limit))
        error_counter = True

    if len(Subjects) > Subjects_limit:
        st.error("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {} ‡∏ß‡∏¥‡∏ä‡∏≤".format(Subjects_limit))
        error_counter = True

# Visualize upload data

    with st.expander("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î"):
        #Teacher Chart
        t_chart_data = pd.DataFrame({
                '‡∏Ñ‡∏£‡∏π': Teacher,
                '‡∏Ñ‡∏≤‡∏ö/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå': [sum(TA[t][g][Subjects.index(s)] for g in Grades for s in Subjects) for t in Teacher]
                })

        teacher_chart = alt.Chart(t_chart_data).mark_bar().encode(x=alt.X('‡∏Ñ‡∏£‡∏π',axis=alt.Axis(title=' '), sort='-y'), y=alt.Y('‡∏Ñ‡∏≤‡∏ö/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',axis=alt.Axis(tickCount=20))).properties(title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô')
      
        st.altair_chart(teacher_chart, use_container_width=True)


        #Student Chart
        s_chart_data = pd.DataFrame({
                '‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô': Grades,
                '‡∏Ñ‡∏≤‡∏ö/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå': [sum(TA[t][g][Subjects.index(s)] for t in Teacher for s in Subjects) for t in Grades]
                })

        student_chart = alt.Chart(s_chart_data).mark_bar().encode(x=alt.X('‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',axis=alt.Axis(title=' ')),y=alt.Y('‡∏Ñ‡∏≤‡∏ö/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',axis=alt.Axis(tickCount=25))).properties(title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô')

        st.altair_chart(student_chart, use_container_width=True)

        #display assigned workload
        st.write('‡∏†‡∏≤‡∏£‡∏∞‡∏á‡∏≤‡∏ô‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢') 
        df_show = pd.DataFrame(columns=Grades)
        for s in Subjects:
            Dummy = []
            for g in Grades:
                TDummy = [ t for t in Teacher if TA[t][g][Subjects.index(s)] != 0]
                DDummy = ''
                if  TDummy is not np.empty:
                    for t in TDummy:
                        DDummy = DDummy + '‡∏Ñ‡∏£‡∏π{} {} '.format(t.split(' ')[0],round(TA[t][g][Subjects.index(s)]))                
                Dummy.append(DDummy)       
            df_show.loc[s] = Dummy

        st.dataframe(df_show)

        #display homeroom teacher
        st.write('‡∏Ñ‡∏£‡∏π‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô')
        df_show = pd.DataFrame(columns=Allgrades)
        Dummy = []
        for g in Allgrades:
            TDummy = [ t for t in Teacher if TA[t]['‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô'] == "{}".format(g)]
            DDummy = ''
            if  TDummy is not np.empty:
                for t in TDummy:
                    DDummy = DDummy + '‡∏Ñ‡∏£‡∏π{}'.format(t.split(' ')[0])                
            Dummy.append(DDummy)       
        df_show.loc['‡∏Ñ‡∏£‡∏π‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô'] = Dummy

        st.dataframe(df_show)

    if error_counter == False:
        st.header("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô")
        st.markdown("‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô")

    #Adjusting Conditions

        # number of session perday
        num_sessions_per_day = st.number_input('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≤‡∏ö‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏π‡πâ)',min_value = 4, max_value = 8, value = 5, key='sessionsaday')
        # Homeroom Time
        # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà
        Homeroom_day = st.selectbox('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡πÅ‡∏ô‡∏∞‡πÅ‡∏ô‡∏ß (Homeroom) ‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô',('‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå','‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£','‡∏û‡∏∏‡∏ò','‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ','‡∏®‡∏∏‡∏Å‡∏£‡πå'), key = 'homeroomday')
        st.markdown("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏≤‡∏ö‡πÅ‡∏ô‡∏∞‡πÅ‡∏ô‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≤‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á**‡∏ß‡∏±‡∏ô{}**".format(st.session_state.homeroomday))
        
        #boyscout day
        boyscout_day = st.selectbox('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡∏•‡∏π‡∏Å‡πÄ‡∏™‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô',('‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå','‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£','‡∏û‡∏∏‡∏ò','‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ','‡∏®‡∏∏‡∏Å‡∏£‡πå'), index = 3, key = 'boyscoutday')     

        # PE day
        PE_day = st.multiselect('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏•‡∏∞‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏±‡∏ô)', ['‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå','‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£','‡∏û‡∏∏‡∏ò','‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ','‡∏®‡∏∏‡∏Å‡∏£‡πå'],['‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£'], key='PEday')
        if PE_day == []:
            st.error("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≤‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏û‡∏•‡∏∞")

        if boyscout_day in PE_day:
            st.error("‡∏ß‡∏±‡∏ô‡∏™‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡πÄ‡∏™‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà")
        
        st.write('**‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á**')
        
        #Morning and Afternoon Class preference

        with st.expander('‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ä‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢'):
            morning_sessions_per_day = st.number_input('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤',min_value = 2, max_value = 5, value = int(np.ceil(st.session_state.sessionsaday/2)), key='morningsessionsaday')
            morning_class = st.multiselect('‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)', pd.Series(Subjects),['‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå','‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢','‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©'], key='morningclass')
            afternoon_class = st.multiselect('‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)', pd.Series(Subjects),['‡∏û‡∏•‡∏®‡∏∂‡∏Å‡∏©‡∏≤','‡∏®‡∏¥‡∏•‡∏õ‡∏∞','‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û','‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤'], key='afternoonclass')
            
        # people need to cover the class ex. ill, pragnancy, or retire
        # 2 modes: cover by one or more people/ homeroom teacher takecare of students

        with st.expander('‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ'):
            st.write('‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏π‡∏ö‡∏≤‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏≠‡∏≤‡∏à‡∏°‡∏≤‡∏à‡∏≤‡∏Å ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡πá‡∏ö‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏©‡∏µ‡∏¢‡∏ì ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏π‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏π‡∏ó‡πà‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏°‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ó‡∏ô')
            risky_absent_teacher = st.multiselect('‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ', pd.Series(Teacher), key='absentteacher')

            risk_management = {t:'' for t in st.session_state.absentteacher}
            for t in st.session_state.absentteacher:
                st.write('‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏π{}'.format(t))
                options1 = ['‡∏Ñ‡∏£‡∏π‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô','‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á']
                options2 = [k for k in Teacher if k != t]
                if TA[t]['‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô'] !='':
                    options1 = ['‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á']
                bplan = st.selectbox('‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô', pd.Series(options1), key ='Bplanfor{}'.format(t))
                if bplan == '‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á':
                    risk_management[t] = st.multiselect('‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô', pd.Series(options2), key = 'groupBplanfor{}'.format(t))
                    st.write('‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Ñ‡∏≤‡∏ö‡∏™‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π{} ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'.format(t))
                else:
                    risk_management[t] = '‡∏Ñ‡∏£‡∏π‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô'
                    st.write('‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Ñ‡∏≤‡∏ö‡∏™‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π{} ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏π‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏≤‡∏ö‡∏ô‡∏±‡πâ‡∏ô ‡πÜ'.format(t))

            teacher_planB_homeroom = [t for t in st.session_state.absentteacher if risk_management[t] == '‡∏Ñ‡∏£‡∏π‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô']
            teacher_planB_group = [t for t in st.session_state.absentteacher if risk_management[t] != '‡∏Ñ‡∏£‡∏π‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô']

    #Scheduling
        Days = ['‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå','‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£','‡∏û‡∏∏‡∏ò','‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ','‡∏®‡∏∏‡∏Å‡∏£‡πå']
        Timeslot = [(i,j) for i in Days for j in range(st.session_state.sessionsaday)]

    # ''' Model formulation'''

        p = pu.LpProblem('School Timetabling Problem', pu.LpMinimize)

        # Add variables
    
        var = pu.LpVariable.dicts("ClassAtTime", (Classes,Timeslot), lowBound = 0, upBound = None, cat='Binary')
        # st.write(var.name)


        # '''Soft Constraints'''  
        Penelty_weight = 100
        Reward = -10

        # Morning Class Preference
        Constraint_var = []
        for cc in st.session_state.morningclass:
            Dummy = []
            for j in range(st.session_state.sessionsaday):
                Dummy.append(pu.lpSum(var[c][(i,j)] for i in Days for c in subject_plan[cc]))
            Constraint_var.append(Dummy)

        Penelty_distribution = []
        for c in st.session_state.morningclass:
            Dummy = []
            for i in range(st.session_state.sessionsaday):
                if i+1 <= st.session_state.morningsessionsaday:
                    Dummy.append(1/np.power(2,i+st.session_state.morningclass.index(c))*Reward)
                else:
                    Dummy.append(1/np.power(2,st.session_state.morningclass.index(c))*np.power(Penelty_weight,i))
            Penelty_distribution.append(Dummy)
            
        Morning_Class_Penelty = pu.lpSum(np.dot(Penelty_distribution[i],Constraint_var[i]) for i in range(len(st.session_state.morningclass)))

        # Afternoon Class Preference

        Constraint_var = []
        for cc in st.session_state.afternoonclass:
            Dummy = []
            for j in range(st.session_state.sessionsaday):
                Dummy.append(pu.lpSum(var[c][(i,j)] for i in Days for c in subject_plan[cc]))
            Constraint_var.append(Dummy)

        Penelty_distribution = []
        for c in st.session_state.afternoonclass:
            Dummy = []
            for i in range(st.session_state.sessionsaday):
                if i+1 <= st.session_state.sessionsaday-st.session_state.morningsessionsaday:
                    Dummy.insert(0,1/np.power(2,i+st.session_state.afternoonclass.index(c))*Reward)
                else:
                    Dummy.insert(0,1/np.power(2,st.session_state.afternoonclass.index(c))*np.power(Penelty_weight,i))
            Penelty_distribution.append(Dummy)
            
        Afternoon_Class_Penelty = pu.lpSum(np.dot(Penelty_distribution[i],Constraint_var[i]) for i in range(len(st.session_state.afternoonclass)))
                
        # Add Objective
        p += (Morning_Class_Penelty+Afternoon_Class_Penelty,"Sum_of_Total_Penalty",)

        # '''Hard Constraints'''

        # Teaching According to the Curriculum
        for c in Classes:
            p += (pu.lpSum(var[c][s] for s in Timeslot) == 1)

        # Teachers teach one class at a time and Plan B ‡∏Ñ‡∏£‡∏π‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏π‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏•‡∏≤‡∏ö‡πà‡∏≠‡∏¢
        # When kindergarten teacher teach English, Home room teacher need to take care kindergarten instead.
        
        for t in Teacher:
            t_class = []
            for c in Classes:
                if t == c[0] or (TA[t]['‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô'] == c[1] and c[0] in teacher_planB_homeroom):
                    t_class.append(c)
            for s in Timeslot:
                p += (pu.lpSum(var[c][s] for c in t_class) <= 1)
            if t in teacher_planB_group:
                care_class =[]
                for c in Classes:
                    if c[0] in risk_management[t]:
                        care_class.append(c)
                for s in Timeslot:
                    p += (pu.lpSum(var[c][s] for c in care_class) + pu.lpSum(var[c][s] for c in t_class) <= len(risk_management[t]))


        # Each Grade attend one class at a time
        for g in Grades:
            for s in Timeslot:
                p += (pu.lpSum(var[c][s] for c in student_plan[g]) <= 1)

        # Home room class during the first period of assigned morning
        for c in Classes:
            p += (var[c][Timeslot[Days.index(st.session_state.homeroomday)*st.session_state.sessionsaday]] == 0)

        # Not Learn the same subject on the same day_Hard Constraint Version
        for s in Subjects:
            for g in Grades:
                sg_class = []
                for c in Classes:
                    if s == c[2] and g ==c[1]:
                        sg_class.append(c)
                for i in Days:
                    p += (pu.lpSum(var[c][(i,j)] for c in sg_class for j in range(st.session_state.sessionsaday)) <= 1)

        # Clases distribute close to average everyday for teacher
        sensitivity = 1
        for t in Teacher:
            t_average_per_day = len(teaching_workload[t])/len(Days)
            for i in Days:
                p += (pu.lpSum(var[c][(i,j)] for c in teaching_workload[t] for j in range(st.session_state.sessionsaday)) <= t_average_per_day + sensitivity)

        # PE Day
        PE_Not_Teach_Day =[d for d in Days if d not in st.session_state.PEday]

        for i in PE_Not_Teach_Day:
            p += (pu.lpSum(var[c][(i,j)] for c in subject_plan['‡∏û‡∏•‡∏®‡∏∂‡∏Å‡∏©‡∏≤'] for j in range(st.session_state.sessionsaday)) == 0)

        # '''Solve'''

        # Save and Solving

        st.write('‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏π‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ :sunglasses:')

        solve_button = st.button('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô')

        if solve_button:
            with st.spinner('...‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠...'):
                p.solve()

                if pu.LpStatus[p.status] == 'Infeasible':
                    st.error("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏à‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏ú‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô")
                else:
                    colums_name = ['‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà {}'.format(i+1) for i in range(st.session_state.sessionsaday)]
                    Last_period = []
                    for i in range(len(Days)):
                        if Days[i] != st.session_state.boyscoutday:
                            Last_period.append('‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ø')
                        else:
                            Last_period.append('‡∏•‡∏π‡∏Å‡πÄ‡∏™‡∏∑‡∏≠')

            
                    df_teacher = { t : pd.DataFrame(columns= colums_name) for t in Teacher}   

                    for t in Teacher:
                        for i in Days:
                            Dplan = []
                            for j in range(st.session_state.sessionsaday):
                                Dummy = [round(var[c][(i,j)].varValue) for c in teaching_workload[t]] #somehow, some solution is not exactly one.
                                # print(sum(Dummy))
                                if sum(Dummy) == 0:
                                    Dplan.append('')
                                else:
                                    for c in teaching_workload[t]:
                                        if round(var[c][(i,j)].varValue) == 1:
                                            Dplan.append(c[2]+' '+c[1])
                            # print(Dplan)
                            # print(len(Dplan))
                            df_teacher[t].loc[i] = Dplan

                        for g in Grades: #homeroom teacher teach homeroom at the first period of assigned day
                            if g == TA[t]['‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏±‡πâ‡∏ô']:       
                                df_teacher[t].at[st.session_state.homeroomday,colums_name[0]] = '‡πÅ‡∏ô‡∏∞‡πÅ‡∏ô‡∏ß {}'.format(g)
                        
                        # ['‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ø (‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏∏‡∏à‡∏£‡∏¥‡∏ï‡∏®‡∏∂‡∏Å‡∏©‡∏≤)','‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ø (‡∏°‡πà‡∏ß‡∏ô‡∏ã‡∏∑‡πà‡∏ô‡πÇ‡∏Æ‡πÅ‡∏ã‡∏ß)','‡∏•‡∏π‡∏Å‡πÄ‡∏™‡∏∑‡∏≠','‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ø (‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏¢‡πÄ‡∏ñ‡πâ‡∏≤‡πÅ‡∏Å‡πà‡∏ô‡πâ‡∏≠‡∏¢)','‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ø (‡∏Ñ‡∏ô‡∏î‡∏µ‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏ò‡∏£‡∏£‡∏°)']

                        df_teacher[t].insert(3,'‡∏û‡∏±‡∏Å‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô',['','','','','']) # Insert Lunch Time
                        df_teacher[t].insert(st.session_state.sessionsaday+1,'‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà {}'.format(st.session_state.sessionsaday+1),Last_period) # Insert less study more knowledge
                        
                    # Student Schedule Dataframe
                    df_student = { g : pd.DataFrame(columns=colums_name) for g in Grades}   

                    for g in Grades:
                        for i in Days:
                            Dplan = []
                            for j in range(st.session_state.sessionsaday):
                                Dummy = [round(var[c][(i,j)].varValue) for c in student_plan[g]] #somehow, some solution is not exactly one.
                                if sum(Dummy) == 0:
                                    Dplan.append('')
                                else:
                                    for c in student_plan[g]:
                                        if round(var[c][(i,j)].varValue) == 1:
                                            Dplan.append(c[2])
                            df_student[g].loc[i] = Dplan

                        df_student[g].at[st.session_state.homeroomday,colums_name[0]] = '‡πÅ‡∏ô‡∏∞‡πÅ‡∏ô‡∏ß'
                        df_student[g].insert(3,'‡∏û‡∏±‡∏Å‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô',['','','','','']) # Insert Lunch Time
                        df_student[g].insert(st.session_state.sessionsaday+1,'‡∏Ñ‡∏≤‡∏ö‡∏ó‡∏µ‡πà {}'.format(st.session_state.sessionsaday+1),Last_period) # Insert less study more knowledge

                    for g in Grades[:3]: 
                        df_student[g].replace('‡∏û‡∏•‡∏®‡∏∂‡∏Å‡∏©‡∏≤','‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤/‡∏û‡∏•‡∏®‡∏∂‡∏Å‡∏©‡∏≤',inplace = True)


                    with st.expander("‡∏ï‡∏£‡∏ß‡∏à‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô"):
                        for g in Grades:
                            st.write('‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ä‡∏±‡πâ‡∏ô {}'.format(g))
                            st.write(df_student[g])
                        for t in Teacher:
                            st.write('‡∏Ñ‡∏£‡∏π{}'.format(t))
                            st.write(df_teacher[t])


                # '''Create a Pandas Excel writer using XlsxWriter as the engine.'''
                    
                    writer = pd.ExcelWriter('‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô{} ‡πÄ‡∏ó‡∏≠‡∏° {} ‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ {}.xlsx'.format(school_name,semester,year), engine='xlsxwriter')

                    # Write each dataframe to a different worksheet.
                    for t in Teacher:
                        df_teacher[t].to_excel(writer, sheet_name='‡∏Ñ‡∏£‡∏π{}'.format(t))
                    for g in Grades:
                        df_student[g].to_excel(writer, sheet_name='‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ä‡∏±‡πâ‡∏ô {}'.format(g))

                    # Close the Pandas Excel writer and output the Excel file.
                    writer.save()

                    with open('‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô{} ‡πÄ‡∏ó‡∏≠‡∏° {} ‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ {}.xlsx'.format(school_name,semester,year), 'rb') as my_file:
                        st.download_button(
                            label = 'üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô üì•', 
                            data = my_file, 
                            file_name = '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≠‡∏ô{} ‡πÄ‡∏ó‡∏≠‡∏° {} ‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ {}.xlsx'.format(school_name,semester,year), 
                            mime = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
